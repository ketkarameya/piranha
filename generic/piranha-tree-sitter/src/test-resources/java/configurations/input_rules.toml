[[rules]]
name = "Enum Based, toggle enabled"
query = """((
	(method_invocation 
    	name : (_) @n1
        arguments: ((argument_list 
        				([
                          (field_access field: (_)@f)
                          (_) @f
                         ])) )
        	
    ) @mi
)
(#eq? @n1 "isToggleEnabled")
(#eq? @f "@stale_flag_name")
)"""
replace_node = "mi"
replace = "@treated"
groups = [ "Returns boolean"]
holes = ["treated", "stale_flag_name"]


[[rules]]
name = "Enum Based, flag enabled"
query = """((
	(method_invocation 
    	name : (_) @n1
        arguments: ((argument_list 
        				([
                          (field_access field: (_)@f)
                          (_) @f
                         ])) )
        	
    ) @mi
)
(#eq? @n1 "isFlagTreated")
(#eq? @f "@stale_flag_name")
)"""
replace_node = "mi"
replace = "@treated"
groups = [ "Returns boolean"]
holes = ["treated", "stale_flag_name"]

[[rules]]
name = "Enum Based, toggle disabled"
query = """((
	(method_invocation 
    	name : (_) @n1
        arguments: ((argument_list 
        				([
                          (field_access field: (_)@f)
                          (_) @f
                         ])) )
        	
    ) @mi
)
(#eq? @n1 "isToggleDisabled")
(#eq? @f "@stale_flag_name")
)"""
replace_node = "mi"
replace = "@treated_complement"
groups = [ "Returns boolean"]
holes = ["treated_complement", "stale_flag_name"]

[[rules]]
name = "Enum based, Delete enum constant (just the constant)"
query = """
    (
    ((enum_constant name : (_)) @ec)       
    (#eq? @ec "@stale_flag_name")
    )
    """
replace_node = "ec"
replace = ""
groups = []
holes = ["stale_flag_name"]

[[rules]]
name = "Enum based, Delete enum constant"
query = """
    (
    ((enum_constant name : (_) @n) @ec)       
    (#eq? @n  "@stale_flag_name")
    )
    """
replace_node = "ec"
replace = ""
groups = []
holes = ["stale_flag_name"]


[[rules]]
name = "Enum based, method invocation, put enabled"
query = """
(
(expression_statement (method_invocation name : (_) @n
					arguments: (argument_list
                    			([
		                          (field_access field: (_)@f)
        		                  (_) @f
                		         ])))@m) @expr
 (#eq? @n "putToggleEnabled")
 (#eq? @f "@stale_flag_name")
)
"""
replace_node = "expr"
replace = ""
groups = []
holes = ["stale_flag_name"]

[[rules]]
name = "Enum based, method invocation, put disabled"
query = """
(
(expression_statement (method_invocation name : (_) @n
					arguments: (argument_list
                    			([
		                          (field_access field: (_)@f)
        		                  (_) @f
                		         ])))@m) @expr
 (#eq? @n "putToggleDisabled")
 (#eq? @f "@stale_flag_name")
)
"""
replace_node = "expr"
replace = ""
groups = []
holes = ["stale_flag_name"]

[[rules]]
name = "Enum based, method invocation, includeEvent"
query = """
(
(expression_statement (method_invocation name : (_) @n
					arguments: (argument_list
                    			([
		                          (field_access field: (_)@f)
        		                  (_) @f
                		         ])))@m) @expr
 (#eq? @n "includeEvent")
 (#eq? @f "@stale_flag_name")
)
"""
replace_node = "expr"
replace = ""
groups = []
holes = ["stale_flag_name"]

[[rules]]
name = "Interface based, annotated method declaration"
query = """
(
(method_declaration
	 (modifiers (annotation
     				name: (_) @a_name
					arguments: (annotation_argument_list
                    	(element_value_pair
							 key: (_) @k1
							 value: (_) @v1))))
      name: (_) @m_name
 )@m1
 (#eq? @a_name "BoolParam")
 (#eq? @k1 "key")
 (#eq? @v1 "\\\"@stale_flag_name\\\"")
 )
 (
(method_declaration
	 (modifiers (annotation
					arguments: (annotation_argument_list
                    	(element_value_pair
							 key: (_) @k2
							 value: (_) @v2))))
 )@m2
 (#eq? @k2 "namespace")
 (#eq? @v2 "\\\"@namespace\\\"")
 )
"""
replace_node = "m1"
replace = ""
groups = ["Delete Method"]
holes = ["stale_flag_name", "namespace"]

[[rules]]
name = "Interface based, annotated method declaration and interface"
query= """
(
(interface_declaration
	(modifiers (annotation
     				name: (_) @a_name
					arguments: (annotation_argument_list
                    	(element_value_pair
							 key: (_) @k1
							 value: (_) @v1)))) @mod
    name: (_) @i_name
	body: (interface_body
    	(_)* @pre
    	(method_declaration
			 (modifiers (annotation
					arguments: (annotation_argument_list
                    	(element_value_pair
							 key: (_) @k2
							 value: (_) @v2))))
                             
        name: (_) @m_name) @md
	    (_)* @post
    )
) @id
 (#eq? @k1 "namespace")
 (#eq? @v1 "\\\"@namespace\\\"")
 (#eq? @k2 "key")
 (#eq? @v2 "\\\"@stale_flag_name\\\"")
)
"""
replace_node = "md"
replace = ""
groups = ["Delete Method"]
holes = ["stale_flag_name", "namespace"]


[[rules]]
name = "Interface based, replace method invocation chain with true/false"
query = """
(
   ((method_invocation
       object: (method_invocation 
       			object: (_) @o
       			name: (identifier) @i2)
       name : (identifier) @i) 
       @mi)
   (#eq? @i "getCachedValue")
   (#eq? @i2 "@m_name")
   (#not-match? @o "^[A-Z]+.*")
)"""
replace_node = "mi"
replace = "@treated"
groups = ["Returns boolean"]
holes = ["m_name", "treated"]

[[rules]]
name = "Interface based, method invocation, put"
query = """
(
(expression_statement ((method_invocation name: (_) @n
			arguments : (
            (argument_list 
            	(method_invocation 
                		name: (_) @an)
                ([(true) (false)])
             ))

            ) @m) ) @expr
 (#eq? @n "put")
 (#eq? @an "@m_name")
)
"""
replace_node = "expr"
replace = ""
groups = []
holes = ["m_name"]
 
[[rules]]
name = "Delete annotated method, treated"
query = """(
(method_declaration
	(modifiers (annotation name: (_) @n
    					  arguments : 
                          	(annotation_argument_list
                            	(element_value_pair 
                                	key : (_) @k1
                                    value : (_) @v1))) )) @md1
(#eq? @k1 "ns")
(#eq? @v1 "\\\"@namespace\\\"")
(#eq? @n "ParameterValue")
)
(
(method_declaration
	(modifiers (annotation name: (_) 
    					  arguments : 
                          	(annotation_argument_list
                            	(element_value_pair 
                                	key : (_) @k2
                                    value : (_) @v2))))) @md2
(#eq? @k2 "key")
(#eq? @v2 "\\\"@stale_flag_name\\\"")
)
(
(method_declaration
	(modifiers (annotation name: (_) 
    					  arguments : 
                          	(annotation_argument_list
                            	(element_value_pair 
                                	key : (_) @k3
                                    value : (_) @v3))) @an) ) @md3
(#eq? @k3 "val")
(#eq? @v3 "\\\"@treated\\\"")
)"""
replace_node = "an"
replace = ""
groups = []
holes = ["stale_flag_name", "treated", "namespace"]

[[rules]]
name = "Delete annotated method, not treated"
query = """(
(method_declaration
	(modifiers (annotation name: (_) @n
    					  arguments : 
                          	(annotation_argument_list
                            	(element_value_pair 
                                	key : (_) @k1
                                    value : (_) @v1))) )) @md1
(#eq? @k1 "ns")
(#eq? @v1 "\\\"@namespace\\\"")
(#eq? @n "ParameterValue")
)
(
(method_declaration
	(modifiers (annotation name: (_) 
    					  arguments : 
                          	(annotation_argument_list
                            	(element_value_pair 
                                	key : (_) @k2
                                    value : (_) @v2))))) @md2
(#eq? @k2 "key")
(#eq? @v2 "\\\"@stale_flag_name\\\"")
)
(
(method_declaration
	(modifiers (annotation name: (_) 
    					  arguments : 
                          	(annotation_argument_list
                            	(element_value_pair 
                                	key : (_) @k3
                                    value : (_) @v3))) @an) ) @md3
(#eq? @k3 "val")
(#eq? @v3 "\\\"@treated_complement\\\"")
)"""
replace_node = "md3"
replace = ""
groups = ["Delete Method"]
holes = ["stale_flag_name", "treated_complement", "namespace"]
# 
