[[rules]]
name = "Simple If-(optional)else True"
query = """
(
    (if_statement
        condition : ((parenthesized_expression ((true) @i)))
        consequence : ((statement) @s))
@ifstmt)
"""
replace = "@s"



[[rules]]
name = "Simple If-else False"
query = """
(
    (if_statement
        condition : ((parenthesized_expression ((false) @i)))
        consequence : ((statement) @s)
        alternative : ((_) @el))
@ifstmt)"""
replace = "@el"



[[rules]]
name = "Simple if False"
query = """
(
    (if_statement
        condition : ((parenthesized_expression ((false) @i)))
        consequence : ((statement) @s)
        !alternative)
@ifstmt)
"""
replace = ""



[[rules]]
name = "not False"

query = """
(
    (unary_expression
        operator: "!"
        operand: (false))
@u)
"""
replace = "true"




[[rules]]
name = "not True"
query = """
(
    (unary_expression
        operator: \"!\"
        operand: (true))
@u)
"""
replace = "false"




[[rules]]
name = "Remove unnecesary nested block"
query = """
(
    (block
        (

            (_)*@pre
            (block (_)* @b)@n
            (_)*@post
        )
    )@b1
)"""
replace = """
{
    @pre
    @b
    @post
}"""



[[rules]]
name = "And - left operand is True"
query = """
(
    (binary_expression
        left: (true)
        operator:"&&"
         right : (_)* @other )
) @b"""
replace = "@other"




[[rules]]
name = "And - right operand is True"

query = """
(
    (binary_expression
        left : (_)* @other
        operator:"&&"
        right: (true)
    )
@b)"""
replace = "@other"




[[rules]]
name = "Or - right operand is True"
query = """
(
    (binary_expression
        left : (_)* @other
        operator:"||"
        right: (true)
    )
@b)"""
replace = "true"



[[rules]]
name = "Or - left operand is True"
query = """
(
    (binary_expression
        left : (true)
        operator:"||"
        right: (_)* @other
    )
@b)
"""
replace = "true"



[[rules]]
name = "And - left operand is False"
query = """
(
    (binary_expression
        left: (false)
        operator:"&&"
        right : (_)* @other
    )
@b)"""
replace = "false"



[[rules]]
name = "And - right operand is False"

query = """
(
    (binary_expression
        left : (_)* @other
        operator:"&&"
        right: (false)
    )
@b)
"""
replace = "false"



[[rules]]
name = "Or - left operand is False"
query = """(
(
    binary_expression
        left : (_)* @other
        operator:"||"
        right: (false)
    )
@b)"""
replace = "@other"



[[rules]]
name = "And - right operand is False"

query = """
(
    (binary_expression
        left : (false)
        operator:"||"
        right: (_)* @other
    )
@b)"""
replace = "@other"



[[rules]]
name = "Or - Remove unnecessary brackets from left operand"
query ="""(
(
    binary_expression
        left: ((parenthesized_expression
                    (expression !left) @e))
        operator: "||"
        right: (_)* @r)
@bo)"""
replace = "@e || @r"



[[rules]]
name = "Or - Remove unnecessary brackets from right operand"
query = """
(binary_expression
        left: (_)* @l
        operator: "||"
        right: ((parenthesized_expression
                    (expression !left) @e))
@bo)"""
replace = "@l || @e"



[[rules]]
name = "And - Remove unnecessary brackets from left operand "
query = """
(
    (binary_expression
        left: ((parenthesized_expression (expression !left) @e))
        operator: "&&"
        right: (_)* @r)
@bo)"""
replace = "@e && @r"



[[rules]]
name = "And - Remove unnecessary brackets from right operand "
query = """(
    (binary_expression
        left: (_)* @l
        operator: "&&"
        right: ((parenthesized_expression
                         (expression !left) @e)))
@bo)"""
replace = "@l && @e"



[[rules]]
name = "Elide all statements after return"
query = """(
        (block  ((statement)* @pre)
         ((return_statement) @r)
         ((statement)+ @post)) @b)"""
replace = "{\n@pre\n@r\n}"



[[rules]]
name = "Ternay operator True"
query = """
(
    (ternary_expression condition: (true)
        consequence: (_)* @then
        alternative: (_)* @else)
@t)"""
replace = "@then"


[[rules]]
name = "Ternay operator False"
query = """
(
    (ternary_expression condition: (false)
        consequence: (_)* @then
        alternative: (_)* @else)
@t)"""
replace = "@else"


[[rules]]
name = "Parenthesized boolean literal"
query = """
(
(parenthesized_expression 
	[(true)
     (false)
    ] @l
    ) @p
)
"""
replace = "@l"

[[rules]]
name="Inline Local Variable Declaration - Delete variable declaration"
query= """
(
((local_variable_declaration 
				declarator: (variable_declarator 
                					name: (_) @n
                					value: [(true) (false)] @v)) @l)
)
"""
replace = ""
and_then_scope = "METHOD"
[rules.constraint]
predicate = "None"
matcher = "((method_declaration) @md1)"
queries = ["""
(
((assignment_expression
    				left: (_) @l
                    right: (_) @r) @a)
(#eq? @l "[@n]")
(#not-eq? @r "[@v]")
)"""]
[[rules.and_then]]
name="Inline local variable declaration - Remove redundant assignments"
query = """
(
(expression_statement (assignment_expression
                                left: (_) @l
                    right: (_) @r)) @e
(#eq? @l "[@n]")
(#eq? @r "[@v]")
) 
"""
replace = ""
[[rules.and_then]]
name="Inline local variable declaration - Replace identifier with value"
query = """
(
(identifier )@i
(#eq? @i "[@n]")
)
"""
replace="[@v]"
[rules.and_then.constraint]
predicate = "None"
matcher = "((method_declaration) @md1)"
queries = ["""
(
((assignment_expression
    				left: (_) @l
                    right: (_) @r) @a)
(#eq? @l "[@i]")
) 
"""]

#########


            [[rules]]
name="Inline Field Declaration - Delete field declaration"
query= """
(
((field_declaration 
				declarator: (variable_declarator 
                					name: (_) @n
                					value: [(true) (false)] @v)) @l)
)
"""
replace = ""
and_then_scope = "CLASS"
[rules.constraint]
predicate = "None"
matcher = "((class_declaration) @cd)"
queries = ["""
(
((assignment_expression
    				left: (_) @l
                    right: (_) @r) @a)
(#eq? @l "[@n]")
(#not-eq? @r "[@v]")
)"""]
[[rules.and_then]]
name="Inline local variable declaration - Remove redundant assignments"
query = """
(
(expression_statement (assignment_expression
                                left: (_) @l
                    right: (_) @r)) @e
(#eq? @l "[@n]")
(#eq? @r "[@v]")
) 
"""
replace = ""
[[rules.and_then]]
name="Inline local variable declaration - Replace identifier with value"
query = """
(
(identifier )@i
(#eq? @i "[@n]")
)
"""
replace="[@v]"
[rules.and_then.constraint]
predicate = "None"
matcher = "((method_declaration) @md1)"
queries = ["""
(
((assignment_expression
    				left: (_) @l
                    right: (_) @r) @a)
(#eq? @l "[@i]")
)
"""]                      
                                    
                                    