[[scopes]]
name = "METHOD"
[[scopes.rules]]
matcher =  """
((method_declaration 
			name : (_) @n
            parameters : (formal_parameters
            		(formal_parameter type:(_) @t0)
                    (formal_parameter type:(_) @t1)
                    (formal_parameter type:(_) @t2)
                    (formal_parameter type:(_) @t3)
                    (formal_parameter type:(_) @t4))) @md)"""
matcher_gen = """
(((method_declaration 
			name : (_) @n1
            parameters : (formal_parameters
            		(formal_parameter type:(_) @r0)
                    (formal_parameter type:(_) @r1)
                    (formal_parameter type:(_) @r2)
                    (formal_parameter type:(_) @r3)
                    (formal_parameter type:(_) @r4))) @md)
(#eq? @n1 "[@n]")
(#eq? @r0 "[@t0]")
(#eq? @r1 "[@t1]")
(#eq? @r2 "[@t2]")
(#eq? @r3 "[@t3]")
(#eq? @r4 "[@t4]")                    
)"""
[[scopes.rules]]
matcher =  """
((method_declaration 
			name : (_) @n
            parameters : (formal_parameters
            		(formal_parameter type:(_) @t0)
                    (formal_parameter type:(_) @t1)
                    (formal_parameter type:(_) @t2)
                    (formal_parameter type:(_) @t3))) @md)"""
matcher_gen = """
(((method_declaration 
			name : (_) @n1
            parameters : (formal_parameters
            		(formal_parameter type:(_) @r0)
                    (formal_parameter type:(_) @r1)
                    (formal_parameter type:(_) @r2)
                    (formal_parameter type:(_) @r3))) @md)
(#eq? @n1 "[@n]")
(#eq? @r0 "[@t0]")
(#eq? @r1 "[@t1]")
(#eq? @r2 "[@t2]")
(#eq? @r3 "[@t3]")
)"""
[[scopes.rules]]
matcher =  """
((method_declaration 
			name : (_) @n
            parameters : (formal_parameters
            		(formal_parameter type:(_) @t0)
                    (formal_parameter type:(_) @t1)
                    (formal_parameter type:(_) @t2))) @md)"""
matcher_gen = """
(((method_declaration 
			name : (_) @n1
            parameters : (formal_parameters
            		(formal_parameter type:(_) @r0)
                    (formal_parameter type:(_) @r1)
                    (formal_parameter type:(_) @r2))) @md)
(#eq? @n1 "[@n]")
(#eq? @r0 "[@t0]")
(#eq? @r1 "[@t1]")
(#eq? @r2 "[@t2]")
)"""
[[scopes.rules]]
matcher =  """
((method_declaration 
			name : (_) @n
            parameters : (formal_parameters
            		(formal_parameter type:(_) @t0)
                    (formal_parameter type:(_) @t1))) @md)"""
matcher_gen = """
(((method_declaration 
			name : (_) @n1
            parameters : (formal_parameters
            		(formal_parameter type:(_) @r0)
                    (formal_parameter type:(_) @r1))) @md)
(#eq? @n1 "[@n]")
(#eq? @r0 "[@t0]")
(#eq? @r1 "[@t1]")
)"""
[[scopes.rules]]
matcher =  """
(
(((method_declaration 
			name : (_) @n
            parameters : 
            	((formal_parameters
            		(((formal_parameter type: (_) @t0) )? @f )) @ff)
                )
    @md)
)
(#not-match? @ff ",")
(#not-eq? @ff "()")
)"""
matcher_gen = """
(
(((method_declaration 
			name : (_) @n1
            parameters : 
            	((formal_parameters
            		(((formal_parameter type: (_) @r1) ) @f1 )) @ff1)
                )
    @md)
)
(#not-match? @ff1 ",")
(#not-eq? @ff1 "()")
(#eq? @n1 "[@n]")
(#eq? @r1 "[@t0]")
)"""

# This is a bit flaky, since it will not support matching ( ) i.e. bracket with space 
[[scopes.rules]]
matcher =  """
(
(((method_declaration 
			name : (_) @n
            parameters : 
            	((formal_parameters) @ff)
                )
    @md)
)

(#not-match? @ff ",")
(#eq? @ff "()")
)"""
matcher_gen = """
(
(((method_declaration 
			name : (_) @n1
            parameters : 
            	((formal_parameters) @ff1)
                )
    @md1)
)

(#not-match? @ff1 ",")
(#eq? @ff1 "()")
(#eq? @n1 "[@n]")
)"""