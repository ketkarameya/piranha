[[scopes]]
name = "Method"
[[scopes.rules]]
matcher =  """
((method_declaration 
			name : (_) @n
            parameters : (formal_parameters
            		(formal_parameter type:(_) @t0)
                    (formal_parameter type:(_) @t1)
                    (formal_parameter type:(_) @t2)
                    (formal_parameter type:(_) @t3)
                    (formal_parameter type:(_) @t4))) @xd0)"""
matcher_gen = """
(((method_declaration 
			name : (_) @z
            parameters : (formal_parameters
            		(formal_parameter type:(_) @r0)
                    (formal_parameter type:(_) @r1)
                    (formal_parameter type:(_) @r2)
                    (formal_parameter type:(_) @r3)
                    (formal_parameter type:(_) @r4))) @qd)
(#eq? @z "@n")
(#eq? @r0 "@t0")
(#eq? @r1 "@t1")
(#eq? @r2 "@t2")
(#eq? @r3 "@t3")
(#eq? @r4 "@t4")                    
)"""
[[scopes.rules]]
matcher =  """
((method_declaration 
			name : (_) @n
            parameters : (formal_parameters
            		(formal_parameter type:(_) @t0)
                    (formal_parameter type:(_) @t1)
                    (formal_parameter type:(_) @t2)
                    (formal_parameter type:(_) @t3))) @xd5)"""
matcher_gen = """
(((method_declaration 
			name : (_) @z
            parameters : (formal_parameters
            		(formal_parameter type:(_) @r0)
                    (formal_parameter type:(_) @r1)
                    (formal_parameter type:(_) @r2)
                    (formal_parameter type:(_) @r3))) @qd)
(#eq? @z "@n")
(#eq? @r0 "@t0")
(#eq? @r1 "@t1")
(#eq? @r2 "@t2")
(#eq? @r3 "@t3")
)"""
[[scopes.rules]]
matcher =  """
((method_declaration 
			name : (_) @n
            parameters : (formal_parameters
            		(formal_parameter type:(_) @t0)
                    (formal_parameter type:(_) @t1)
                    (formal_parameter type:(_) @t2))) @xd2)"""
matcher_gen = """
(((method_declaration 
			name : (_) @z
            parameters : (formal_parameters
            		(formal_parameter type:(_) @r0)
                    (formal_parameter type:(_) @r1)
                    (formal_parameter type:(_) @r2))) @qd)
(#eq? @z "@n")
(#eq? @r0 "@t0")
(#eq? @r1 "@t1")
(#eq? @r2 "@t2")
)"""
[[scopes.rules]]
matcher =  """
((method_declaration 
			name : (_) @n
            parameters : (formal_parameters
            		(formal_parameter type:(_) @t0)
                    (formal_parameter type:(_) @t1))) @xd3)"""
matcher_gen = """
(((method_declaration 
			name : (_) @z
            parameters : (formal_parameters
            		(formal_parameter type:(_) @r0)
                    (formal_parameter type:(_) @r1))) @qd)
(#eq? @z "@n")
(#eq? @r0 "@t0")
(#eq? @r1 "@t1")
)"""
[[scopes.rules]]
matcher =  """
(
(((method_declaration 
			name : (_) @n
            parameters : 
            	((formal_parameters
            		(((formal_parameter type: (_) @t0) )? @f )) @zz)
                )
    @xd6)
)
(#not-match? @zz ",")
(#not-eq? @zz "()")
)"""
matcher_gen = """
(
(((method_declaration 
			name : (_) @z
            parameters : 
            	((formal_parameters
            		(((formal_parameter type: (_) @r1) ) @p )) @j)
                )
    @4)
)
(#not-match? @j ",")
(#not-eq? @j "()")
(#eq? @z "@n")
(#eq? @r1 "@t0")
)"""

# This is a bit flaky, since it will not support matching ( ) i.e. bracket with space 
[[scopes.rules]]
matcher =  """
(
(((method_declaration 
			name : (_) @n
            parameters : 
            	((formal_parameters) @gg)
                )
    @xd4)
)

(#not-match? @gg ",")
(#eq? @gg "()")
)"""
matcher_gen = """
(
(((method_declaration 
			name : (_) @z
            parameters : 
            	((formal_parameters) @j)
                )
    @xd1)
)

(#not-match? @j ",")
(#eq? @j "()")
(#eq? @z "@n")
)"""

[[scopes]]
name = "Class"
[[scopes.rules]]
matcher = "(class_declaration name:(_) @n) @c"
matcher_gen = """
(
((class_declaration name:(_) @z) @qc)
(#eq? @z "@n")
)
"""