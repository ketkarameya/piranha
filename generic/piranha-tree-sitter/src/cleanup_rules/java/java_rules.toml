# The language specific rules in this file are applied after the API spcific change has been performed.

# Before : 
#  if (true) { doSomething(); }
# After :
#  { doSomething(); } 
# 
# Before : 
#  if (true) { doSomething(); } else { doSomethingElse();}
# After :
#  { doSomething(); } 
#
[[rules]]
name = "If statement - true"
query = """
(
    (if_statement
        condition : ((parenthesized_expression ((true) @i)))
        consequence : ((statement) @consequence))
@if_statement)
"""
replace_node = "if_statement"
replace = "@consequence"
groups = ["If cleanup"]

# Before : 
#  if (true) { doSomething(); } else { doSomethingElse();}
# After :
#  { doSomethingElse(); } 
#
# Before : 
#  if (true) { doSomething(); }
# After :
#  
[[rules]]
name = "If statement - false"
query = """
(
    (if_statement
        condition : ((parenthesized_expression ((false) @i)))
        consequence : ((statement) @consequence)
        alternative : ((_) @alternative) ?)
@if_statement)"""
replace_node = "if_statement"
replace = "@alternative"
groups = ["If cleanup"]

# Before : 
#  !false
# After :
#  true 
[[rules]]
name = "not false"
query = """
(
    (unary_expression
        operator: "!"
        operand: (false))
@unary_expression)
"""
replace_node = "unary_expression"
replace = "true"
groups = ["Boolean expression simplify"]


# Before : 
#  !true
# After :
#  false
[[rules]]
name = "not True"
query = """
(
    (unary_expression
        operator: \"!\"
        operand: (true))
@u)
"""
replace_node = "u"
replace = "false"
groups = ["Boolean expression simplify"]


# Before : 
#  {
#     someStepsBefore();
#     {
#        someSteps();
#     }   
#     someStepsAfter();
#  }
# After :
#  {
#     someStepsBefore();
#        someSteps();
#     someStepsAfter();
#  }
#
[[rules]]
name = "Remove unnecesary nested block"
query = """
((block
        (
            (_)* @pre
            (block (_)* @nested.statements) @nested.block
            (_)* @post
        )
    )@sb)"""
replace_node = "nested.block"
replace = "@nested.statements"

# Before : 
#  true && abc()
# After :
#  abc()
#
[[rules]]
name = "true and something"
query = """
(
    (binary_expression
        left: (true)
        operator:"&&"
         right : (_)* @rhs )
) @binary_expression"""
replace_node = "binary_expression"
replace = "@rhs"
groups = ["Boolean expression simplify"]

# Before : 
#  abc() && true
# After :
#  abc()
#
[[rules]]
name = "something and true"
query = """
(
    (binary_expression
        left : (_)* @lhs
        operator:"&&"
        right: (true)
    )
@binary_expression)"""
replace_node = "binary_expression"
replace = "@lhs"
groups = ["Boolean expression simplify"]

# Before : 
#  false && abc()
# After :
#  false
#
[[rules]]
name = "false and something"
query = """
(
    (binary_expression
        left: (false)
        operator : "&&"
        right : (_)* @rhs
    )
@binary_expression)"""
replace_node = "binary_expression"
replace = "false"
groups = ["Boolean expression simplify"]

# Before : 
#  abc() && false
# After :
#  false
#
[[rules]]
name = "And - right operand is False"

query = """
(
    (binary_expression
        left : (_)* @lhs
        operator : "&&"
        right: (false)
    )
@binary_expression)
"""
replace_node = "binary_expression"
replace = "false"
groups = ["Boolean expression simplify"]


# Before : 
#  abc() || true
# After :
#  true
#
[[rules]]
name = "Something or true"
query = """
(
    (binary_expression
        left : (_)* @lhs
        operator:"||"
        right: (true)
    )
@binary_expression)"""
replace_node = "binary_expression"
replace = "true"
groups = ["Boolean expression simplify"]

# Before : 
#  true || abc()
# After :
#  true
#
[[rules]]
name = "true or something"
query = """
(
    (binary_expression
        left : (true)
        operator:"||"
        right: (_)* @rhs
    )
@binary_expression)
"""
replace_node = "binary_expression"
replace = "true"
groups = ["Boolean expression simplify"]


# Before: 
#  abc() || false
# After :
#  abc()
#
[[rules]]
name = "something or false"
query = """(
(
    binary_expression
        left : (_)* @lhs
        operator:"||"
        right: (false)
    )
@binary_expression)"""
replace_node = "binary_expression"
replace = "@lhs"
groups = ["Boolean expression simplify"]

# Before: 
#  false || abc()
# After :
#  abc()
#
[[rules]]
name = "Or - right operand is False"
query = """
(
    (binary_expression
        left : (false)
        operator:"||"
        right: (_)* @rhs
    )
@binary_expression)"""
replace_node = "binary_expression"
replace = "@rhs"
groups = ["Boolean expression simplify"]

# Before :
#  {
#    something();
#    return 10;
#    somethingMore();  
#    return 100;
#    
#  } 
# After :
#  {
#    something();
#    return 10;
#  } 
#
[[rules]]
name = "Elide all statements after return"
query = """(
        (block  ((statement)* @pre)
         ((return_statement) @r)
         ((statement)+ @post)) @b)"""
replace_node = "post"
replace = ""

# Before :
#  true ? abc() : def();
# After :
#  abc()
#
[[rules]]
name = "Ternay operator True"
query = """
(
    (ternary_expression condition: (true)
        consequence: (_)* @consequence
        alternative: (_)* @alternative)
@ternary_expression)"""
replace_node = "ternary_expression"
replace = "@consequence"
groups = ["If cleanup"]

# Before :
#  false ? abc() : def();
# After :
#  def()
#
[[rules]]
name = "Ternay operator False"
query = """
(
    (ternary_expression condition: (false)
        consequence: (_)* @consequence
        alternative: (_)* @alternative)
@ternary_expression)"""
replace_node = "ternary_expression"
replace = "@alternative"
groups = ["If cleanup"]

# Before :
# public foo someMethod() { 
#  boolean isFlag = true; 
#  somethingElse();
# }
#  
# After :
# public foo someMethod() { 
#  somethingElse();
# }
#
# Note: Due to the constraint the below example is not updated
# Before :
# public foo someMethod() { 
#  boolean isFlag = true; 
#  isFlag = getFlagStatus();
#  somethingElse();
# }
#  
# After :
# public foo someMethod() { 
#  boolean isFlag = true; 
#  isFlag = getFlagStatus();
#  somethingElse();
# }
#
[[rules]]
name = "Inline Local Variable Declaration - Delete variable declaration"
query = """
(
((local_variable_declaration 
				declarator: (variable_declarator 
                					name: (_) @variable_name
                					value: [(true) (false)] @init)) @variable_declaration)
)
"""
replace_node = "variable_declaration"
replace = ""
groups = []
# Check if there is no assignment where the variable @variable_name is 
# assigned to a value other than @init, within the method body
[rules.constraint]
matcher = "(method_declaration) @md"
predicate = "None"
queries = ["""
(
((assignment_expression
    				left: (_) @a.lhs
                    right: (_) @a.rhs) @a)
(#eq? @a.lhs "@variable_name")
(#not-eq? @a.rhs "@init")
)"""]

# Same as the rule `Inline Local Variable Declaration - Delete variable declaration`, but applicable to 
# fields. 
[[rules]]
name = "Inline Field Declaration - Delete field declaration"
query = """
(
((field_declaration 
				declarator: (variable_declarator 
                					name: (_) @variable_name
                					value: [(true) (false)] @init)) @field_declaration)
)
"""
replace_node = "field_declaration"
replace = ""
groups = []
# Check if there is no assignment where the variable @variable_name is 
# assigned to a value other than @init, within the method body
[rules.constraint]
matcher = "(class_declaration) @cd"
predicate = "None"
queries = ["""(
((assignment_expression
    				left: (_) @a.lhs
                    right: (_) @a.rhs) @a)
(#eq? @a.lhs "@variable_name")
(#not-eq? @a.rhs "@init")
)"""]

[[rules]]
name = "Remove assignment"
query = """
(
(expression_statement (assignment_expression
                                left: (_) @l
                    right: (_) @r)) @expression_statement
(#eq? @l "@variable_name")
(#eq? @r "@init")
) 
"""
replace_node = "expression_statement"
replace = ""
groups = []
holes = ["variable_name", "init"]

# Remove assignment if it is the only assignment in the entire class. 
# This should be done in class and method scope. But while deleting the assignment, 
# we cannot guess if the lhs is a field or a local variable.
[[rules]]
name = "Remove assignment-1"
query = """
(
(expression_statement (assignment_expression
                                left: (_) @variable_name
                    right: [(true) (false)] @init)) @expression_statement
) 
"""
replace_node = "expression_statement"
replace = ""
groups = []
holes = []
[rules.constraint]
matcher = "(class_declaration) @cd"
predicate = "None"
queries = ["""(
((assignment_expression
    				left: (_) @a.lhs
                    right: (_) @a.rhs) @a)
(#eq? @a.lhs "@variable_name")
(#not-eq? @a.rhs "@init")
)"""]

# Replaces the identifier with the name @variable_name with value @init
# Let's say @variable_name = `x` and @init = `true`
# Before :
#  if (x  && abc()) { doSomething(); }
# After 
#  if (true  && abc()) { doSomething(); } 
#
[[rules]]
name = "Replace identifier with value"
query = """
(
(identifier) @identifier
(#eq? @identifier "@variable_name")
)
"""
replace_node = "identifier"
replace = "@init"
groups = []
holes = ["variable_name", "init"]


# Dummy rule that acts as a junction for all boolean based cleanups
[[rules]]
name = "Boolean literal cleanup"
query = """
"""
replace_node = ""
replace = ""

# Dummy rule that acts as a junction for all statement based cleanups
[[rules]]
name = "Statement cleanup"
query = """
"""
replace_node = ""
replace = ""
