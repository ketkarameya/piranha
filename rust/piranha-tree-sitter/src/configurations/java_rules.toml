# Enum based API rules 
flag_name = "[stale_flag_name]"
flag_namespace = "[namespace]"
flag_value = "[treated]"
[[rules]]
name = "Enum Based, toggle enabled"
queries = [
    """((
	(method_invocation 
    	name : (_) @n1
        arguments: ((argument_list 
        				([
                          (field_access field: (_)@f)
                          (_) @f
                         ])) )
        	
    ) @mi
)
(#eq? @n1 "isToggleEnabled")
(#eq? @f "[stale_flag_name]")
)"""
]
replace = "[treated]"
scope = "PROJECT"
language = "Java"

[[rules]]
name = "Enum Based, flag enabled"
queries = [
    """((
	(method_invocation 
    	name : (_) @n1
        arguments: ((argument_list 
        				([
                          (field_access field: (_)@f)
                          (_) @f
                         ])) )
        	
    ) @mi
)
(#eq? @n1 "isFlagTreated")
(#eq? @f "[stale_flag_name]")
)"""
]
replace = "[treated]"
scope = "PROJECT"
language = "Java"

[[rules]]
name = "Enum Based, toggle disabled"
queries = [
    """((
	(method_invocation 
    	name : (_) @n1
        arguments: ((argument_list 
        				([
                          (field_access field: (_)@f)
                          (_) @f
                         ])) )
        	
    ) @mi
)
(#eq? @n1 "isToggleDisabled")
(#eq? @f "[stale_flag_name]")
)"""
]
replace = "[treated_complement]"
scope = "PROJECT"
language = "Java"

[[rules]]
name = "Enum based, Delete enum constant (just the constant)"
queries = [
    """
    (
    ((enum_constant name : (_)) @ec)       
    (#eq? @ec "STALE_FLAG")
    )
    """
]
replace = ""
scope = "PROJECT"
language = "Java"

[[rules]]
name = "Enum based, Delete enum constant"
queries = [
    """
    (
    ((enum_constant name : (_) @n) @ec)       
    (#eq? @n  "STALE_FLAG")
    )
    """
]
replace = ""
scope = "PROJECT"
language = "Java"

[[rules]]
name = "Enum based, method invocation, put enabled"
queries = ["""
(
(expression_statement (method_invocation name : (_) @n
					arguments: (argument_list
                    			([
		                          (field_access field: (_)@f)
        		                  (_) @f
                		         ])))@m) @e
 (#eq? @n "putToggleEnabled")
 (#eq? @f "[stale_flag_name]")
)
"""]
replace = ""
scope = "PROJECT"
language = "Java"

[[rules]]
name = "Enum based, method invocation, put disabled"
queries = ["""
(
(expression_statement (method_invocation name : (_) @n
					arguments: (argument_list
                    			([
		                          (field_access field: (_)@f)
        		                  (_) @f
                		         ])))@m) @e
 (#eq? @n "putToggleDisabled")
 (#eq? @f "[stale_flag_name]")
)
"""]
replace = ""
scope = "PROJECT"
language = "Java"

[[rules]]
name = "Enum based, method invocation, includeEvent"
queries = ["""
(
(expression_statement (method_invocation name : (_) @n
					arguments: (argument_list
                    			([
		                          (field_access field: (_)@f)
        		                  (_) @f
                		         ])))@m) @e
 (#eq? @n "includeEvent")
 (#eq? @f "[stale_flag_name]")
)
"""]
replace = ""
scope = "PROJECT"
language = "Java"


[[rules]]
name = "Interface based, annotated method declaration"
queries = ["""
(
(method_declaration
	 (modifiers (annotation
     				name: (_) @a_name
					arguments: (annotation_argument_list
                    	(element_value_pair
							 key: (_) @k1
							 value: (_) @v1))))
      name: (_) @m_name
 )@m1
 (#eq? @a_name "BoolParam")
 (#eq? @k1 "key")
 (#eq? @v1 "\\\"[stale_flag_name]\\\"")
 )""","""
 (
(method_declaration
	 (modifiers (annotation
					arguments: (annotation_argument_list
                    	(element_value_pair
							 key: (_) @k2
							 value: (_) @v2))))
 )@m2
 (#eq? @k2 "namespace")
 (#eq? @v2 "\\\"[namespace]\\\"")
 )
"""]

replace=""
scope = "PROJECT"
language = "Java"

[[rules.and_then]]
name = "Interface based, replace method invocation chain with true/false"
queries = ["""
(
   ((method_invocation
       object: (method_invocation name: (identifier) @i2)
       name : (identifier) @i) @m)
   (#eq? @i "getVal")
   (#eq? @i2 "[@m_name]")
)"""]
replace = "[treated]"
scope = "PROJECT"
language = "Java"

# [[rules.and_then]]
# name = "Interface based, method invocation, put"
# queries = ["""
# (
# (expression_statement ((method_invocation name: (_) @n
# 			arguments : (
#             (argument_list 
#             	(method_invocation 
#                 		name: (_) @an)
#                 ([(true) (false)])
#              ))
            
#             ) @m) @e)
#  (#eq? @n "put")
#  (#eq? @an "[stale_flag_name]")
# )
# """]
# replace = ""
# scope = "PROJECT"
# language = "Java"

[[rules]]
name = "Simple If-(optional)else True"
queries = ["""
(
    (if_statement
        condition : ((parenthesized_expression ((true) @i)))
        consequence : ((statement) @s))
@ifstmt)
"""]
replace = "@s"
scope = "PARENT"
language = "Java" 

[[rules]]
name = "Simple If-else False"
queries = ["""
(
    (if_statement
        condition : ((parenthesized_expression ((false) @i)))
        consequence : ((statement) @s)
        alternative : ((_) @el))
@ifstmt)"""]
replace = "@el"
scope = "PARENT"
language = "Java"

[[rules]]
name = "Simple if False"
queries = ["""
(
    (if_statement
        condition : ((parenthesized_expression ((false) @i)))
        consequence : ((statement) @s)
        !alternative)
@ifstmt)
"""]
replace = ""
scope = "PARENT"
language = "Java"

[[rules]]
name = "not False"

queries = ["""
(
    (unary_expression
        operator: "!"
        operand: (false))
@u)
"""]
replace = "true"
scope = "PARENT"
language = "Java"


[[rules]]
name = "not True"
queries = ["""
(
    (unary_expression
        operator: \"!\"
        operand: (true))
@u)
"""]
replace = "false"
scope = "PARENT"
language = "Java"


[[rules]]
name = "Remove unnecesary nested block"
queries = ["""
(
    (block
        (

            (_)*@pre
            (block (_)* @b)@n
            (_)*@post
        )
    )@b1
)"""]
replace = """
{
    @pre
    @b
    @post
}"""
scope = "PARENT"
language = "Java"

[[rules]]
name = "And - left operand is True"
queries = ["""
(
    (binary_expression
        left: (true)
        operator:"&&"
         right : (_)* @other )
) @b"""]
replace = "@other"
scope = "PARENT"
language = "Java"


[[rules]]
name = "And - right operand is True"

queries = ["""
(
    (binary_expression
        left : (_)* @other
        operator:"&&"
        right: (true)
    )
@b)"""]
replace = "@other"
scope = "PARENT"
language = "Java"


[[rules]]
name = "Or - right operand is True"
queries = ["""
(
    (binary_expression
        left : (_)* @other
        operator:"||"
        right: (true)
    )
@b)"""]
replace = "true"
scope = "PARENT"
language = "Java"

[[rules]]
name = "Or - left operand is True"
queries = ["""
(
    (binary_expression
        left : (true)
        operator:"||"
        right: (_)* @other
    )
@b)
"""]
replace = "true"
scope = "PARENT"
language = "Java"

[[rules]]
name = "And - left operand is False"
queries = ["""
(
    (binary_expression
        left: (false)
        operator:"&&"
        right : (_)* @other
    )
@b)"""]
replace = "false"
scope = "PARENT"
language = "Java"

[[rules]]
name = "And - right operand is False"

queries = ["""
(
    (binary_expression
        left : (_)* @other
        operator:"&&"
        right: (false)
    )
@b)
"""]
replace = "false"
scope = "PARENT"
language = "Java"

[[rules]]
name = "Or - left operand is False"
queries =[ """(
(
    binary_expression
        left : (_)* @other
        operator:"||"
        right: (false)
    )
@b)"""]
replace = "@other"
scope = "PARENT"
language = "Java"

[[rules]]
name = "And - right operand is False"

queries = ["""
(
    (binary_expression
        left : (false)
        operator:"||"
        right: (_)* @other
    )
@b)"""]
replace = "@other"
scope = "PARENT"
language = "Java"

[[rules]]
name = "Or - Remove unnecessary brackets from left operand"
queries =[ """(
(
    binary_expression
        left: ((parenthesized_expression
                    (expression !left) @e))
        operator: "||"
        right: (_)* @r)
@bo)"""]
replace = "@e || @r"
scope = "PARENT"
language = "Java"

[[rules]]
name = "Or - Remove unnecessary brackets from right operand"
queries = ["""
(binary_expression
        left: (_)* @l
        operator: "||"
        right: ((parenthesized_expression
                    (expression !left) @e))
@bo)"""]
replace = "@l || @e"
scope = "PARENT"
language = "Java"

[[rules]]
name = "And - Remove unnecessary brackets from left operand "
queries = ["""
(
    (binary_expression
        left: ((parenthesized_expression (expression !left) @e))
        operator: "&&"
        right: (_)* @r)
@bo)"""]
replace = "@e && @r"
scope = "PARENT"
language = "Java"

[[rules]]
name = "And - Remove unnecessary brackets from right operand "
queries = ["""(
    (binary_expression
        left: (_)* @l
        operator: "&&"
        right: ((parenthesized_expression
                         (expression !left) @e)))
@bo)"""]
replace = "@l && @e"
scope = "PARENT"
language = "Java"

[[rules]]
name = "Elide all statements after return"
queries = ["""(
        (block  ((statement)* @pre)
         ((return_statement) @r)
         ((statement)+ @post)) @b)"""]
replace = "{\n@pre\n@r\n}"
scope = "PARENT"
language = "Java"

[[rules]]
name = "Ternay operator True"
queries = ["""
(
    (ternary_expression condition: (true)
        consequence: (_)* @then
        alternative: (_)* @else)
@t)"""]
replace = "@then"
scope = "PARENT"
language = "Java"

[[rules]]
name = "Ternay operator False"
queries = ["""
(
    (ternary_expression condition: (false)
        consequence: (_)* @then
        alternative: (_)* @else)
@t)"""]
replace = "@else"
scope = "PARENT"
language = "Java"

[[rules]]
name = "Parenthesized boolean literal"
queries = ["""
(
(parenthesized_expression 
	[(true)
     (false)
    ] @l
    ) @p
)
"""]
replace = "@l"
scope = "PARENT"
language = "Java"