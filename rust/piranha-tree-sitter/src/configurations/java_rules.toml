[[rule]]
name = "r1"
kind = "xp"
query = """
(
    ((method_invocation
            object: (method_invocation name: (identifier) @i2)
            name : (identifier) @i)
    @m)
    (#eq? @i getVal)
    (#eq? @i2 staleFlag)
)"""
replace = "true"

[[rule]]
name = "r2"
kind = "xp"
query = """
(
    ((method_invocation
        object: (method_invocation name: (identifier) @i2)
        name : (identifier) @i) @m)
    (#eq? @i getValN)
    (#eq? @i2 staleFlag)
)"""
replace = "false"

[[rule]]
name = "Simple If-(optional)else True"
kind = "cleanup"
query = """
(
    (if_statement
        condition : ((parenthesized_expression ((true) @i)))
        consequence : ((statement) @s))
@ifstmt)
"""
replace="@s"


[[rule]]
name = "Simple If-else False"
kind = "cleanup"
query = """
(
    (if_statement
        condition : ((parenthesized_expression ((false) @i)))
        consequence : ((statement) @s)
        alternative : ((_) @el))
@ifstmt)"""
replace = "@el"

[[rule]]
name = "Simple if False"
kind = "cleanup"
query = """
(
    (if_statement
        condition : ((parenthesized_expression ((false) @i)))
        consequence : ((statement) @s)
        !alternative)
@ifstmt)
"""
replace = ""

[[rule]]
name = "not False"
kind = "cleanup"
query = """
(
    (unary_expression
        operator: "!"
        operand: (false))
@u)
"""
replace = "true"


[[rule]]
name = "not True"
kind = "cleanup"
query = """
(
    (unary_expression
        operator: \"!\"
        operand: (true))
@u)
"""
replace = "false"


[[rule]]
name = "Remove unnecesary nested block"
kind = "cleanup"
query = """
(
    (block
        (

            (_)*@pre
            (block (_)* @b)@n
            (_)*@post
        )
    )@b1
)"""
replace = """
{
    @pre
    @b
    @post
}
"""

[[rule]]
name = "And - left operand is True"
kind = "cleanup"
query = """
(
    (binary_expression
        left: (true)
        operator:"&&"
         right : (_)* @other )
) @b"""
replace = "@other"


[[rule]]
name = "And - right operand is True"
kind = "cleanup"
query = """
(
    (binary_expression
        left : (_)* @other
        operator:"&&"
        right: (true)
    )
@b)"""
replace = "@other"


[[rule]]
name = "Or - right operand is True"
kind = "cleanup"
query = """
(
    (binary_expression
        left : (_)* @other
        operator:"||"
        right: (true)
    )
@b)"""
replace = "true"

[[rule]]
name = "Or - left operand is True"
kind = "cleanup"
query = """
(
    (binary_expression
        left : (true)
        operator:"||"
        right: (_)* @other
    )
@b)
"""
replace = "true"

[[rule]]
name = "And - left operand is False"
kind = "cleanup"
query = """
(
    (binary_expression
        left: (false)
        operator:"&&"
        right : (_)* @other
    )
@b)"""
replace = "false"

[[rule]]
name = "And - right operand is False"
kind = "cleanup"
query = """
(
    (binary_expression
        left : (_)* @other
        operator:"&&"
        right: (false)
    )
@b)
"""
replace = "false"

[[rule]]
name = "Or - left operand is False"
kind = "cleanup"
query = """(
(
    binary_expression
        left : (_)* @other
        operator:"||"
        right: (false)
    )
@b)"""
replace = "@other"

[[rule]]
name = "And - right operand is False"
kind = "cleanup"
query = """
(
    (binary_expression
        left : (false)
        operator:"||"
        right: (_)* @other
    )
@b)"""
replace = "@other"

[[rule]]
name = "Or - Remove unnecessary brackets from left operand"
kind = "cleanup"
query = """(
(
    binary_expression
        left: ((parenthesized_expression
                    (expression !left) @e))
        operator: "||"
        right: (_)* @r)
@bo)"""
replace = "@e || @r"

[[rule]]
name = "Or - Remove unnecessary brackets from right operand"
kind = "cleanup"
query = """
(binary_expression
        left: (_)* @l
        operator: "||"
        right: ((parenthesized_expression
                    (expression !left) @e))
@bo)"""
replace = "@l || @e"

[[rule]]
name = "And - Remove unnecessary brackets from left operand "
kind = "cleanup"
query = """
(
    (binary_expression
        left: ((parenthesized_expression (expression !left) @e))
        operator: "&&"
        right: (_)* @r)
@bo)"""
replace = "@e && @r"

[[rule]]
name = "And - Remove unnecessary brackets from right operand "
kind = "cleanup"
query = """(
    (binary_expression
        left: (_)* @l
        operator: "&&"
        right: ((parenthesized_expression
                         (expression !left) @e)))
@bo)"""
replace = "@l && @e"

[[rule]]
name = "Elide all statements after return"
kind = "cleanup"
query = """(
        (block  ((statement)* @pre)
         ((return_statement) @r)
         ((statement)+ @post)) @b)"""
replace = "{\n@pre\n@r\n}"

[[rule]]
name = "Ternay operator True"
kind = "cleanup"
query = """
(
    (ternary_expression condition: (true)
        consequence: (_)* @then
        alternative: (_)* @else)
@t)"""
replace = "@then"

[[rule]]
name = "Ternay operator False"
kind = "cleanup"
query = """
(
    (ternary_expression condition: (false)
        consequence: (_)* @then
        alternative: (_)* @else)
@t)"""
replace = "@else"